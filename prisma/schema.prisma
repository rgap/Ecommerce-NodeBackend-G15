// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement()) @map("user_id")
  name        String    @map("user_name") @db.VarChar(120)
  email       String    @unique @map("user_email") @db.VarChar(120)
  password    String    @map("user_password") @db.VarChar(120)
  isVerified  Boolean   @default(false) @map("user_is_verified")
  emailToken  String?   @unique @map("user_email_token") @db.VarChar(255)
  phoneNumber String?   @map("user_phone_number") @db.VarChar(20)
  address     String?   @map("user_address") @db.VarChar(255)
  city        String?   @map("user_city") @db.VarChar(50)
  region      String?   @map("user_region") @db.VarChar(50)
  country     String?   @map("user_country") @db.VarChar(50)
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  Order Order[]

  @@map("user")
}

model Color {
  id        Int      @id @default(autoincrement()) @map("color_id")
  name      String   @unique @map("color_name") @db.VarChar(255)
  code      String   @map("hex_color") @db.VarChar(7)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Stock Stock[]

  @@map("color")
}

model Size {
  id        Int      @id @default(autoincrement()) @map("size_id")
  name      String   @unique @map("size_name") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Stock Stock[]

  @@map("size")
}

model Product {
  id               Int      @id @default(autoincrement()) @map("product_id")
  title            String   @map("product_title") @db.VarChar(84)
  description      String   @map("product_description") @db.VarChar(255)
  shortDescription String   @map("product_short_description") @db.VarChar(28)
  mainImage        String   @map("product_main_image") @db.VarChar(255)
  material         String   @map("product_material") @db.VarChar(255)
  care             String   @map("product_care") @db.VarChar(255)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  Image     Image[]     @relation("ProductToImage")
  Stock     Stock[]
  OrderItem OrderItem[]

  @@map("product")
}

model Image {
  id        Int     @id @default(autoincrement()) @map("image_id")
  url       String  @map("image_url") @db.VarChar(255)
  productId Int     @map("image_product_id")
  product   Product @relation("ProductToImage", fields: [productId], references: [id])

  @@map("image")
}

model Stock {
  productId Int     @map("stock_product_id")
  product   Product @relation(fields: [productId], references: [id])

  colorId Int   @map("stock_color_id")
  color   Color @relation(fields: [colorId], references: [id])

  sizeId Int  @map("stock_size_id")
  size   Size @relation(fields: [sizeId], references: [id])

  quantity Int   @map("stock_quantity")
  price    Float

  @@id([productId, colorId, sizeId])
  @@map("stock")
}

model Order {
  id                  Int         @id @default(autoincrement())
  paymentId           Int?        @map("payment_id") // assigned to a specific payment transaction
  userId              Int         @map("user_id")
  user                User        @relation(fields: [userId], references: [id])
  paymentDate         DateTime?   @map("payment_date")
  payerEmail          String      @map("payer_email") @db.VarChar(250)
  payerDocumentType   String      @map("payer_document_type") @db.VarChar(10)
  payerDocumentNumber String      @map("payer_document_number") @db.VarChar(50)
  installments        Int
  issuerId            String      @map("issuer_id") @db.VarChar(100) // unique financial institution ID
  paymentMethodId     String      @map("payment_method_id") @db.VarChar(20) // Visa, MasterCard, American Express, etc
  token               String      @db.VarChar(250) // unique identifier generated by MercadoPago when a credit card is tokenized
  status              String      @db.VarChar(10)
  amount              Decimal     @map("amount") // total amount of the transaction in PEN, with precision
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  OrderItem           OrderItem[]

  @@map("order")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  name      String  @db.VarChar(255) // Name of the product
  color     String  @db.VarChar(50) // Color of the product
  imageUrl  String  @db.VarChar(255) // URL of the product image
  quantity  Int
  price     Float

  @@map("order_item")
}
